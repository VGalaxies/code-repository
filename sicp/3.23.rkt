#lang sicp

(define (make-deque)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (find-prev now)
      (if (eq? (cdr now) rear-ptr)
          now
          (find-prev (cdr now))))
    (define (dispatch m)
      (cond ((eq? m 'front-deque)
             (if (null? front-ptr)
                 (error "FRONT called with an empty deque")
                 (car front-ptr)))
            ((eq? m 'rear-deque)
             (if (null? rear-ptr)
                 (error "REAR called with an empty deque")
                 (car rear-ptr)))
            ((eq? m 'print-deque)
             front-ptr)
            ((eq? m 'empty-deque?)
             (null? front-ptr))
            ((eq? m 'rear-insert-deque!)
             (lambda (item)
               (if (null? front-ptr)
                   (begin (set! front-ptr (cons item '()))
                          (set! rear-ptr front-ptr))
                   (begin (set-cdr! rear-ptr (cons item '()))
                          (set! rear-ptr (cdr rear-ptr))))))
            ((eq? m 'front-insert-deque!)
             (lambda (item)
               (if (null? front-ptr)
                   (begin (set! front-ptr (cons item '()))
                          (set! rear-ptr front-ptr))
                   (let ((new-pair (cons item '())))
                     (begin (set-cdr! new-pair front-ptr)
                            (set! front-ptr new-pair))))))
            ((eq? m 'front-delete-deque!)
             (if (null? front-ptr)
                 (error "DELETE-FRONT! called with an empty deque")
                 (if (eq? front-ptr rear-ptr)
                     (begin (set! front-ptr '())
                            (set! rear-ptr '()))
                     (set! front-ptr (cdr front-ptr)))))
            ((eq? m 'rear-delete-deque!)
             (if (null? front-ptr)
                 (error "DELETE-REAR! called with an empty deque")
                 (if (eq? front-ptr rear-ptr)
                     (begin (set! front-ptr '())
                            (set! rear-ptr '()))
                     (let ((prev (find-prev front-ptr)))
                       (begin (set-cdr! prev '())
                              (set! rear-ptr prev))))))))
    dispatch))

(define q1 (make-deque))

(q1 'empty-deque?)
(q1 'print-deque)

((q1 'front-insert-deque!) 'a)
(q1 'print-deque)

((q1 'front-insert-deque!) 'b)
(q1 'print-deque)

(q1 'front-delete-deque!)
(q1 'print-deque)

((q1 'rear-insert-deque!) 'c)
(q1 'print-deque)

(q1 'rear-delete-deque!)
(q1 'print-deque)

(q1 'rear-delete-deque!)
(q1 'print-deque)

