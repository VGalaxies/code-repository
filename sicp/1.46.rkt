#lang racket/base
(define (iterative-improve good-enough? improve)
  (define (aid guess)
    (if (good-enough? guess)
        guess
        (aid (improve guess))))
  (lambda (x) (aid x)))

(define (sqrt x)
  (define (square x) (* x x))
  (define tolerance 0.00001)
  (define (improve guess)
    (average guess (/ x guess)))
  (define (average x y) 
    (/ (+ x y) 2.0))
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) tolerance))
  (define (sqrt-iter guess x)
    ((iterative-improve good-enough? improve) x))
  (sqrt-iter 1.0 x))

(sqrt 2)

(define (fixed-point f)
  (define first-guess 1.0)
  (define tolerance 0.00001)
  (define (close-enough? v)
    (< (abs (- v (improve v)))
       tolerance))
  (define (improve x) (f x))
  (define (fixed-point-iter guess x)
    ((iterative-improve close-enough? improve) first-guess))
  (fixed-point-iter f first-guess))

(fixed-point cos)