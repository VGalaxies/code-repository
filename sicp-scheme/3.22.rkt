#lang sicp
(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (dispatch m)
      (cond ((eq? m 'front-queue)
             (if (null? front-ptr)
                 (error "FRONT called with an empty queue")
                 (car front-ptr)))
            ((eq? m 'rear-queue)
             (if (null? rear-ptr)
                 (error "REAR called with an empty queue")
                 (car rear-ptr)))
            ((eq? m 'print-queue)
             front-ptr)
            ((eq? m 'empty-queue?)
             (null? front-ptr))
            ((eq? m 'insert-queue!)
             (lambda (item)
               (if (null? front-ptr)
                   (begin (set! front-ptr (cons item '()))
                          (set! rear-ptr front-ptr))
                   (begin (set-cdr! rear-ptr (cons item '()))
                          (set! rear-ptr (cdr rear-ptr))))))
            ((eq? m 'delete-queue!)
             (if (null? front-ptr)
                 (error "DELETE! called with an empty queue")
                 (set! front-ptr (cdr front-ptr))))))
    dispatch))

(define q1 (make-queue))

(q1 'empty-queue?)
(q1 'print-queue)
((q1 'insert-queue!) 'a)
(q1 'print-queue)
((q1 'insert-queue!) 'b)
(q1 'print-queue)
(q1 'delete-queue!)
(q1 'print-queue)
((q1 'insert-queue!) 'c)
(q1 'print-queue)
(q1 'delete-queue!)
(q1 'print-queue)